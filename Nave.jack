class Nave {

    field int memory_pos;
    field int x_pos;
    field int vertical_pos;
    field int player_bullet_pos;
    field int key;

    constructor Nave new() {
        let x_pos = 15; //posicion de memoria en X de la nave
        let vertical_pos = 220; // posicion en Y en pixeles de la nave
        let player_bullet_pos = -10000;
        let memory_pos = Math.multiply(32, vertical_pos) + x_pos;

        return this;
    }

    method void userInput (Aliens aliens) {
        var int respuesta;
        let respuesta = 0;
        if (~(Keyboard.keyPressed() = 0)) {
            while (Keyboard.keyPressed() = key) {
                // Don't do anything
            }
        }

        let key = Keyboard.keyPressed();


        if (key = 130) {
            do Screen.setColor(true);
            do Screen.drawRectangle(Math.multiply(x_pos, 16), vertical_pos + 1, Math.multiply(x_pos, 16) + 30, vertical_pos + 30);
            let x_pos = x_pos - 1;
        }

        if (key = 132) {
            do Screen.setColor(true);
            do Screen.drawRectangle(Math.multiply(x_pos, 16), vertical_pos + 1, Math.multiply(x_pos, 16) + 30, vertical_pos + 30);
            let x_pos = x_pos + 1;
        }

        if (key = 131) {
            if (player_bullet_pos < -1000) {
                let respuesta=0;

                let player_bullet_pos = memory_pos - Math.multiply(32, 5);
                do Sprites.drawShipBullet(player_bullet_pos);
            }
        }

        if (player_bullet_pos > -1000) { 
            let respuesta=0;

            do Sprites.drawShipBullet(player_bullet_pos);
            do Sys.wait(10);
            let respuesta= aliens.verifyKill(player_bullet_pos);

            if(respuesta=0){ //si mata un alien para la bala
                let player_bullet_pos = player_bullet_pos - Math.multiply(32, 5);
            }else{
                do erase(player_bullet_pos);
                let player_bullet_pos = -10000;
            }
            
        }

        let memory_pos = Math.multiply(32, vertical_pos) + x_pos;
        do Sprites.drawShip(memory_pos);
        
        return;
    }

    method void erase(int posicion) {
        var int memAddress; 
        let memAddress = 16384+posicion;
        // column 0
        do Memory.poke(memAddress, -1);
        do Memory.poke(memAddress +32, -1);
        do Memory.poke(memAddress +64, -1);
        do Memory.poke(memAddress +96, -1);
        do Memory.poke(memAddress +128, -1);
        do Memory.poke(memAddress +160, -1);
        do Memory.poke(memAddress +192, -1);
        do Memory.poke(memAddress +224, -1);
        do Memory.poke(memAddress +256, -1);
        do Memory.poke(memAddress +288, -1);
        do Memory.poke(memAddress +320, -1);
        do Memory.poke(memAddress +352, -1);
        do Memory.poke(memAddress +384, -1);
        do Memory.poke(memAddress +416, -1);
        do Memory.poke(memAddress +448, -1);
        do Memory.poke(memAddress +480, -1);
        do Memory.poke(memAddress +512, -1);
        do Memory.poke(memAddress +544, -1);
        do Memory.poke(memAddress +576, -1);
        do Memory.poke(memAddress +608, -1);
        do Memory.poke(memAddress +640, -1);
        do Memory.poke(memAddress +672, -1);
        do Memory.poke(memAddress +704, -1);
        do Memory.poke(memAddress +736, -1);
        do Memory.poke(memAddress +768, -1);
        do Memory.poke(memAddress +800, -1);
        do Memory.poke(memAddress +832, -1);
        do Memory.poke(memAddress +864, -1);
        // column 1
        do Memory.poke(memAddress +1, -1);
        do Memory.poke(memAddress +33, -1);
        do Memory.poke(memAddress +65, -1);
        do Memory.poke(memAddress +97, -1);
        do Memory.poke(memAddress +129, -1);
        do Memory.poke(memAddress +161, -1);
        do Memory.poke(memAddress +193, -1);
        do Memory.poke(memAddress +225, -1);
        do Memory.poke(memAddress +257, -1);
        do Memory.poke(memAddress +289, -1);
        do Memory.poke(memAddress +321, -1);
        do Memory.poke(memAddress +353, -1);
        do Memory.poke(memAddress +385, -1);
        do Memory.poke(memAddress +417, -1);
        do Memory.poke(memAddress +449, -1);
        do Memory.poke(memAddress +481, -1);
        do Memory.poke(memAddress +513, -1);
        do Memory.poke(memAddress +545, -1);
        do Memory.poke(memAddress +577, -1);
        do Memory.poke(memAddress +609, -1);
        do Memory.poke(memAddress +641, -1);
        do Memory.poke(memAddress +673, -1);
        do Memory.poke(memAddress +705, -1);
        do Memory.poke(memAddress +737, -1);
        do Memory.poke(memAddress +769, -1);
        do Memory.poke(memAddress +801, -1);
        do Memory.poke(memAddress +833, -1);
        do Memory.poke(memAddress +865, -1);
        return;
    }
}